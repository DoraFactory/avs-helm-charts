nameOverride: ""
fullnameOverride: ""

replicaCount: 1
labels: {}

pvc:
  size: 10Gi
  storageClassName: "standard-rwo"
  labesl: {}
  annotations: {}
imagePullSecrets: []
service:
  annotations: {}
  type: LoadBalancer
  ports:
    - name: health
      port: 10003
      protocol: TCP
      targetPort: 10003
    - name: metrics
      port: 10004
      protocol: TCP
      targetPort: 10004
ingress:
  annotations: {}
  enabled: false
  host: example.com

podAnnotations: {}
podSecurityContext: {}
securityContext: {}

configs:
  EO_CHAIN_WS_ENDPOINT: "wss://rpc.testnet.eoracle.network/ws"
  EO_REGISTRY_COORDINATOR: "0xc4A6E362e8Bd89F28Eb405F9Aa533784884B9c4F"
  EO_STAKE_REGISTRY: "0xdda1a381920971642477CA79F5BFc1515414782d"
  EO_CONFIG_ADDRESS: "0xf735Ad57952906a672eEEaDbef3bC69ECD24E50C"
  EO_AGGREGATOR_ADDRESS: "0x6B0BE2aaD42612803c9Fc389A3806EF21E8cbDb6"
  ETH_RPC_ENDPOINT: "https://ethereum-holesky-rpc.publicnode.com"
  ETHEREUM_FEED_RPC_ENDPOINT: "https://ethereum-rpc.publicnode.com"
  EO_KEYSTORE_PATH: ".keystore"
  EO_PROMETHEUS_PORT: "10004"
  EO_HEALTH_ENDPOINTS_PORT: "10003"
  EO_LOGGING_LEVEL: "debug"

register:
  image:
    repository: eoracle/opr_cli
    pullPolicy: Always
    tag: "latest"

node:
  volumeMounts: []
  image:
    repository: eoracle/data-validator
    pullPolicy: Always
    tag: "latest"
  ports:
    - name: rpc
      containerPort: 8545
      protocol: TCP
    - name: health
      containerPort: 10003
      protocol: TCP
    - name: metrics
      containerPort: 10004
      protocol: TCP
  resources:
    limits:
      cpu: "2"
      memory: 8Gi
    requests:
      cpu: "500m"
      memory: 2Gi
  env: []
  command: []
  args: []

  readinessProbe:
    httpGet:
      path: /metrics
      port: 10004
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 3
    failureThreshold: 3
    successThreshold: 1
  # livenessProbe:
  #   httpGet:
  #     path: /metrics
  #     port: 9090
  #   initialDelaySeconds: 1200
  #   periodSeconds: 30
  #   timeoutSeconds: 3
  #   failureThreshold: 2
  #   successThreshold: 1

nodeSelector: {}

tolerations: []

affinity: {}

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

  podAnnotations: {}

  podSecurityContext: {}
  # fsGroup: 2000

  securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000
  #
volumes: []
vmPodScrape:
  enabled: false
